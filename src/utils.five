"s." [
    [ over + b@u b. ] count
    drop
] define

"print_error_line" [ ; ( p:line n:line p:word n:word -- )
    l, l, ; ( p:line n:line )
    over + swap ; ( p:lineend p:line )
    dup 1 l@ swap - s.
    ">>>" s.
    1 l@ 0 l@ pdup s.
    "<<<" s.
    ; ( p:lineend p:word n:word )
    + ; ( p:lineend p:afterword )
    dup nrot - s.
] define

"hex_digit" [ ; ( num -- char )
    dup 10 < [ 48 ] [ 87 ] ifelse +
] define

"tohex" [ ; ( p:buf num -- n:buf )
    tuck [ 4 >>u swap 1 + swap dup ] repeat drop
    ; ( num p:end )
    dup nrot ; ( p:end num p:end )
    [
        1 -
        pdup swap 15 & hex_digit swap b!
        swap 4 >>u swap
        over
    ] repeat
    nip -
] define

".h" [
    lhere 32 lallot
    "0x" s.
    dup rot tohex s.
    32 b.
] define

"_dump" [
    dhere =_dstack_start swap
    "[ " s.
    over - lgnative >>u
    [ over swap +n @ .h ] count
    drop
    "]" s.
] define

"%u10" [ ; ( a -- a%10 )
    dup /u10 *10 -
] define

"todec_u" [ ; ( p:buf num -- n:buf )
    tuck [ /u10 swap 1 + swap dup ] repeat drop
    ; ( num p:end )
    dup nrot ; ( p:end num p:end )
    [
        1 -
        pdup swap %u10 48 + swap b!
        swap /u10 swap
        over
    ] repeat
    nip -
] define

"todec" [
    dup <0
    [
        over 45 swap b!
        swap 1 + swap
        neg todec_u
        1 +
    ] [
        todec_u
    ] ifelse
] define

"." [
    lhere 32 lallot
    dup rot todec s.
    32 b.
] define

"nl" [ 10 b. ] define

"hello" [
    "Hello, world!" s. nl
] define

"words" [
    =last @
    [
        dup 1 neg =
        [
            drop 0
        ] [
            dup name_of_def s. " " s.
            1 +n @
            1
        ] ifelse
    ] repeat
] define

"_showoffset" [
    dup @ over - 1 +n
    lgnative >>
    dup 0 > [ "+" s. ] if
    .
] define

"_showstep" [ ; ( depth current -- depth current )
  dup @
  begin_case
    [ dup `__lit = ] [ drop 1 +n dup @ . 1 +n ] case
    [ dup `__litlist = ] [ drop 2 +n "[ " s. swap 1 + swap ] case
    [ dup `__litstr = ] [
        drop dup 1 +n @ over 2 +n swap 34 b. s. 34 b. 32 b.
        dup 1 +n @ + 2 +n aligned
    ] case
    [ dup `__jump = ] [ drop "jump_" s.  1 +n _showoffset  1 +n ] case
    [ dup `__jif = ] [ drop "jif_" s.  1 +n _showoffset  1 +n ] case
    [ dup `__return = ] [ drop 1 +n "] " s. swap 1 - swap ] case
    [ 1 ] [ name_of_def s. " " s. 1 +n ] case
  end_case
] define

"_showlist" [
    1 swap
    "[ " s.
    [ _showstep over >0 ] repeat
    pdrop
] define

"showdef" [
    dup @
    begin_case
    [ dup =_rundef = ] [ drop 4 +n _showlist ] case
    [ dup =_runindirect = ] [ drop 4 +n @ "(indirect) " s. _showlist ] case
    [ 1 ] [ pdrop "(unknown)" s. ] case
    end_case
] define
