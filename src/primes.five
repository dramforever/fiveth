"?newline" [
    dup 10 = swap 13 = |
] define

"echo_char" [
    dup ?newline
    [ drop 10 b. ] [ b. ] ifelse
] define

"getline" [ ; ( p:buf -- n:line )
    dup
    [
        getchar
        dup 1 neg =
        [
            drop 0
        ] [
            pdup swap b!
            swap 1 + swap
            dup echo_char
            ?newline =0
        ] ifelse
    ] repeat
    swap -
] define

"=line_buf" 1024 var

"Primes up to? " s.

=line_buf dup getline
1 - parse_decimal drop

"=TOTAL" native var ; Primes up to

=TOTAL !

"TOTAL" [ =TOTAL @ ] define
"=comps" TOTAL var  ; Flags, mark 1 if not prime

TOTAL [ =comps + 0 swap b! ] count ; Initialize to 0

"mark-comp" [ =comps +  1 swap b! ] define
0 mark-comp  1 mark-comp  ; 0 and 1 are not prime

"max" [ ; ( a b -- n ) larger of a and b
    pdup > [ drop ] [ nip ] ifelse
] define

".pad" [ ; ( num width -- )
    swap
    lhere 32 lallot
    dup rot todec
    rot over - 0 max [ drop 32 b. ] count
    s.
] define

"sieve-multiples" [ ; ( n -- ) Mark 2*n, 3*n etc as composite
    dup
    over +
    [
        dup =comps + 1 swap b!
        over +
        dup TOTAL <
    ] repeat
    pdrop
] define


TOTAL 1 >> [ dup 2 >= [ sieve-multiples ] [ drop ] ifelse ] count

"prime?" [ =comps + b@ =0 ] define
TOTAL [ dup prime? [ 8 .pad ] [ drop ] ifelse ] count ; Print primes found

0 TOTAL [ prime? [ 1 + ] if ] count ; Count of primes found
nl . "primes found below " s. TOTAL . nl
