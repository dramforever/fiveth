; Bootstrapping `define`: First, create `rawdef` in allot space
=here @ dup "rawdef" tuck dup =here +! pswap swap pswap memcpy align
; ( p:name n:name )

; As a reminder the structure is { code link name namelen }
=here @ 0 5 +n =here +!
=_runindirect over !
=last @ over 1 +n !
tuck 3 +n !
tuck 2 +n !

[
    ; ( p:name n:name p:code n:payload -- p:def )
    align =here @ swap
    ; ( p:name n:name p:code p:def n:payload -- )
    4 +n aligned =here +!
    ; ( p:name n:name p:code p:def -- )

    tuck !
    =last @ over 1 +n !
    tuck 3 +n !
    tuck 2 +n !

    dup =last !
] over 4 +n !

=last !

; Then we can `define` in terms of `rawdef`
"define" =_runindirect native rawdef
[
    ; ( p:name n:name l -- )
    nrot =_runindirect native rawdef
    4 +n !
] swap 4 +n !

"here" [ =here @ ] define
"allot" [ =here +! ] define

"nl" [ 10 sys_putchar ] define

"hello" [
    "Hello, world!" s. nl
] define

"words" [
    =last @
    [
        dup 1 neg =
        [
            drop 0
        ] [
            dup name_of_def s. " " s.
            1 +n @
            1
        ] ifelse
    ] repeat
    nl
] define

"hex_digit" [ ; ( num -- char )
    dup 10 < [ 48 ] [ 87 ] ifelse +
] define

"tohex" [ ; ( p:buf num -- n:buf )
    pdup
    [ swap 1 + swap 4 >>u dup ] repeat drop
    ; ( p:buf num p:end )
    swap nrot ; ( num p:buf p:end )
    tuck swap - nrot ; ( n:buf num p:end )
    [ 1 -  over 15 & hex_digit over b! swap 4 >>u swap over ] repeat
    pdrop
] define

".h" [
    lhere 32 lallot
    "0x" s.
    dup rot tohex s.
    32 sys_putchar
] define

"_dump" [
    dhere =_dstack_start swap
    "[ " s.
    over - lgnative >>u
    [ over swap +n @ .h ] count
    drop
    "]" s. nl
] define

1 2 3 4 _dump _dump pdrop pdrop
"Hello, world!" s. nl
